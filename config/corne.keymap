/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <66 65 69 70 16 17 29 51 50 49 48 47 13 14 26 25 27 15 28 37 36 38 39 40 41>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <22 58 57 43 44 42 56 41 40 54 55 69 70 65 66 6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 39 38 36 37>;
        };

        hmlg: hmlg {
            compatible = "zmk,behavior-hold-tap";
            label = "HMLG";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <150>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        lt_spc: lt_spc {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SPC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
        };

        clt: clt {
            compatible = "zmk,behavior-hold-tap";
            label = "CLT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <500>;
            quick-tap-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&none  &kp Q         &kp W        &kp E         &kp R            &kp T                      &kp Y                    &kp U         &kp I        &kp O        &kp P            &none
&none  &hml LCTRL A  &hml LALT S  &hmlg LGUI D  &hml LSHFT F     &hml LA(LC(LS(LGUI))) G    &hmr LA(LC(LS(LGUI))) H  &hmr RSHFT J  &hmr LGUI K  &hmr LALT L  &hmr LCTRL SEMI  &none
&none  &kp Z         &kp X        &kp C         &kp V            &kp B                      &kp N                    &kp M         &kp COMMA    &kp DOT      &kp SLASH        &none
                                  &none         &lt_spc 1 SPACE  &clt 3 ESC                 &kp RETURN               &clt 2 BSPC   &none
            >;
        };

        num {
            bindings = <
&none  &kp N6         &kp N7        &kp N8         &kp N9         &kp N0                      &trans                    &trans         &trans        &trans        &trans         &none
&none  &hml LCTRL N1  &hml LALT N2  &hmlg LGUI N3  &hml LSHFT N4  &hml LA(LC(LS(LGUI))) N5    &hml LA(LC(LS(LGUI))) N6  &hmr RSHFT N7  &hmr LGUI N8  &hmr LALT N9  &hmr LCTRL N0  &none
&none  &kp LA(N1)     &kp LA(N2)    &kp LA(N3)     &kp LA(N4)     &kp LA(N5)                  &kp LA(N6)                &kp LA(N7)     &kp LA(N8)    &kp LA(N9)    &kp LA(N0)     &none
                                    &none          &trans         &trans                      &trans                    &trans         &none
            >;
        };

        sym {
            bindings = <
&none  &kp EXCL         &kp AT          &kp HASH          &kp DLLR          &kp PRCNT               &kp CARET             &kp AMPS         &kp STAR         &kp LPAR        &kp RPAR         &none
&none  &hml LCTRL LBKT  &hml LALT RBKT  &hmlg LGUI GRAVE  &hml LSHFT MINUS  &kp LA(LC(LS(LGUI)))    &kp LA(LC(LS(LGUI)))  &hmr RSHFT PLUS  &hmr LGUI TILDE  &hmr LALT BSLH  &hmr LCTRL APOS  &none
&none  &kp LBRC         &kp RBRC        &kp TILDE         &kp UNDER         &none                   &none                 &kp EQUAL        &none            &kp PIPE        &kp DQT          &none
                                        &none             &trans            &trans                  &trans                &trans           &none
            >;
        };

        nav {
            bindings = <
&none  &none            &kp LEFT          &kp UP               &kp DOWN             &kp RIGHT                       &none     &none     &none   &none      &hmr LCTRL LG(LS(N2))  &none
&none  &hml LCTRL C_PP  &hml LALT C_PREV  &hmlg LGUI C_VOL_UP  &hml LSHFT C_VOL_DN  &hml LA(LC(LS(LGUI))) C_NEXT    &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none                  &none
&none  &none            &none             &none                &none                &none                           &none     &none     &none   &none      &kp LG(LS(N5))         &none
                                          &none                &trans               &trans                          &trans    &trans    &none
            >;
        };

        sys {
            bindings = <
&none  &none         &none         &none         &sys_reset    &bootloader     &bootloader  &sys_reset  &none  &none  &none  &none
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_CLR   &none       &none  &none  &none  &none
&none  &none         &none         &none         &none         &out OUT_TOG    &none        &none       &none  &none  &none  &none
                                   &none         &trans        &trans          &trans       &trans      &none
            >;
        };

        //     mouse {
        //       bindings = <
        // //╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
        //     &none     &none           &none           &none           &none           &none                  U_WH_L        U_WH_D        U_WH_U        U_WH_R        &none             &none
        // //├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        //     &none     &none           &none           &none           &none           &none                  U_MS_L        U_MS_D        U_MS_U        U_MS_R        &none             &none
        // //├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
        //     &none     &kp LG(Z)     &kp LG(X)     &kp LG(C)     &kp LG(V)     &kp TAB              &none           &mkp LCLK     &mkp MB2      &mkp MB3      &none             &none
        // //├──────┤ ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯ ├──────┤
        //     &none                                               &trans           &trans                  &trans           &trans                                                       &none
        // //╰──────╯                                           ╰─────────────┴─────────────╯ ╰──────╯ ╰─────────────┴─────────────╯                                           ╰──────╯
        //       >;
    };
};
